{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"htsim Network Simulator","text":"htsim is now part of Broadcom <p>htsim is a high-performance discrete event network simulator designed for datacenter networking research. It leverages optimized C++ implementation and specialized datacenter models to enable fast, accurate simulation of transport protocols and congestion control algorithms at scale.</p> <p>htsim supports comprehensive datacenter networking research across multiple dimensions:</p> TCP NewReno NDP (Near-optimal) Swift RoCE (RDMA) HPCC DCTCP EQDS FatTree Topology DragonFly Permutation Incast All-to-All Source Routing ECMP Adaptive Routing <p>Corresponding research papers and use cases can be found in Multipath TCP, NDP, and EQDS publications. For implementation details, see the algorithm overview and architecture documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Installation requires only a modern C++ compiler with no external dependencies:</p> <pre><code>git clone https://github.com/Broadcom/csg-htsim.git\ncd csg-htsim/sim\nmake\n</code></pre> <p>For datacenter experiments, build the specialized simulators:</p> <pre><code>cd datacenter\nmake\n\n# Available executables:\n# htsim_tcp, htsim_ndp, htsim_swift, htsim_roce, htsim_hpcc, htsim_eqds\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>We start with a simple NDP experiment on a 16-node datacenter network with permutation traffic:</p> <pre><code># Generate traffic matrix\ncd connection_matrices\npython3 gen_permutation.py perm_16n_16c.cm 16 16 0 0 0\n\n# Run NDP experiment\ncd ..\n./htsim_ndp -nodes 16 -tm connection_matrices/perm_16n_16c.cm -cwnd 50 -strat ecmp_host -paths 16 -log sink -q 50 -end 1000\n</code></pre> <p>After running the simulation, you can analyze the results:</p> <pre><code># View summary statistics\n../parse_output logout.dat -ndp -show\n\n# Generate throughput plots\npython3 create_throughput_plot.py logout.dat ndp experiment_results\n</code></pre> <p>The simulator outputs detailed performance metrics including throughput, latency, queue utilization, and flow completion times for comprehensive protocol evaluation.</p> <p>Multiple Protocols</p> <p>Replace <code>htsim_ndp</code> with <code>htsim_tcp</code>, <code>htsim_swift</code>, or any other protocol simulator to compare performance under identical conditions.</p>"},{"location":"#core-components","title":"Core Components","text":"<p>htsim's modular architecture separates concerns for maximum flexibility and performance:</p>"},{"location":"#event-driven-simulation-engine","title":"Event-Driven Simulation Engine","text":"<p>The core simulator provides picosecond-precision discrete event scheduling with optimized data structures for handling millions of events efficiently. The event system supports both absolute and relative time scheduling with sophisticated cancellation and rescheduling mechanisms.</p>"},{"location":"#transport-protocols","title":"Transport Protocols","text":"<p>Each protocol implements its own congestion control algorithm while sharing common infrastructure:</p> <ul> <li>TCP NewReno: Traditional AIMD congestion control with fast recovery</li> <li>NDP: Pull-based protocol with return-to-sender and path diversity  </li> <li>Swift: Delay-based congestion control with multi-subflow support</li> <li>RoCE: Rate-based protocol with credit flow control for lossless networks</li> <li>HPCC: High-precision control using in-band network telemetry</li> <li>DCTCP: ECN-based protocol for datacenter environments</li> <li>EQDS: Sophisticated scheduling with speculative transmission</li> </ul>"},{"location":"#datacenter-infrastructure","title":"Datacenter Infrastructure","text":"<p>Comprehensive datacenter modeling including FatTree topologies, ECMP routing, PFC (Priority Flow Control), and realistic switch models with configurable buffer sizes and switching latencies.</p>"},{"location":"#modularity","title":"Modularity","text":"<p>By default, htsim experiments consist of topology generation, traffic matrix creation, protocol simulation, and result analysis run in sequence. However, the system assumes independence between these components, making htsim highly modular for research customization:</p> <p>You can swap out any of these components or customize them extensively. The following aspects are completely modular:</p> <ol> <li>Transport Protocols - Implement custom congestion control algorithms</li> <li>Network Topologies - Design specialized datacenter architectures  </li> <li>Traffic Patterns - Create realistic workload models</li> <li>Routing Strategies - Develop adaptive forwarding mechanisms</li> <li>Queue Management - Customize buffer management and scheduling</li> <li>Logging and Analysis - Extract detailed performance metrics</li> </ol> <p>To learn more about the underlying simulation engine and customization options, see the architecture guide.</p>"},{"location":"#overview","title":"Overview","text":"<p>htsim provides extensive functionality for datacenter networking research. Below you'll find comprehensive method overviews organized by common usage patterns.</p>"},{"location":"#common-simulation-commands","title":"Common Simulation Commands","text":"Operation Command Run NDP experiment <code>./htsim_ndp -nodes N -tm matrix.cm -strat ecmp_host</code> Generate traffic matrix <code>python3 gen_permutation.py out.cm N N 0 0 0</code> Analyze results <code>../parse_output logout.dat -ndp -show</code> Create throughput plots <code>python3 create_throughput_plot.py logout.dat ndp results</code> Run multi-protocol comparison <code>./compare_protocols.sh matrix.cm results/</code> Generate incast traffic <code>python3 gen_incast.py incast.cm N 1 2000000</code> Test different queue sizes <code>./htsim_ndp [params] -q 50</code> Enable detailed logging <code>./htsim_ndp [params] -log sink,queue,traffic</code> Set simulation duration <code>./htsim_ndp [params] -end 5000</code> Configure routing strategy <code>./htsim_ndp [params] -strat perm,ecmp_host,ecmp_ar</code>"},{"location":"#protocol-parameters","title":"Protocol Parameters","text":"<p>After configuring your simulation, several parameters control protocol behavior. These parameters directly affect congestion control performance and should be tuned based on your experimental goals.</p> Parameter Description <code>-cwnd N</code> Initial congestion window size in packets <code>-q N</code> Queue size in packets for switch buffers <code>-strat strategy</code> Routing strategy: perm, ecmp_host, ecmp_ar, etc. <code>-paths N</code> Number of parallel paths for multipath protocols <code>-mtu N</code> Maximum transmission unit in bytes <code>-end T</code> Simulation duration in microseconds <code>-log types</code> Enable logging: sink, queue, traffic, switches <code>-nodes N</code> Network size (number of nodes in topology) <code>-tm file</code> Traffic matrix file specifying communication patterns <code>-hop_latency T</code> Per-hop wire latency in microseconds"},{"location":"#experiment-variations","title":"Experiment Variations","text":"<p>htsim supports diverse experimental scenarios for comprehensive protocol evaluation across different network conditions and traffic patterns.</p> Experiment Type Configuration Protocol Comparison <code>./compare_protocols.sh traffic_matrix.cm results/</code> Traffic Pattern Analysis <code>python3 gen_incast.py matrix.cm N sinks flow_size</code> Topology Scaling <code>./htsim_ndp -nodes 64,128,256 -tm matrix.cm</code> Queue Sensitivity <code>./run_queue_sweep.sh 10,50,100,200 matrix.cm</code> Routing Strategy Evaluation <code>./htsim_ndp -strat perm,ecmp_host,ecmp_ar</code> Multi-Path Load Balancing <code>./htsim_ndp -paths 1,4,8,16 -strat ecmp_host</code> Flow Size Distribution <code>python3 gen_mixed_flows.py matrix.cm sizes.dist</code> Network Failure Scenarios <code>./htsim_ndp -failure_links links.txt -failure_time T</code> Congestion Control Tuning <code>./parameter_sweep.sh protocol param_range matrix.cm</code>"},{"location":"#visualizations-and-analysis","title":"Visualizations and Analysis","text":"<p>Performance evaluation in networking research requires comprehensive visualization and statistical analysis capabilities to understand protocol behavior under different conditions.</p> Analysis Type Command Throughput Time Series <code>python3 create_throughput_plot.py logout.dat protocol results</code> Flow Completion Time CDF <code>python3 plot_fct_cdf.py logout.dat results</code> Queue Utilization Heatmap <code>python3 plot_queue_heatmap.py logout.dat results</code> Protocol Comparison <code>python3 compare_protocols.py results1/ results2/ comparison</code> Latency Distribution <code>python3 plot_latency_dist.py logout.dat results</code> Network Utilization <code>python3 plot_network_util.py logout.dat results</code> Congestion Analysis <code>python3 analyze_congestion.py logout.dat results</code> Path Diversity Metrics <code>python3 plot_path_usage.py logout.dat results</code> Statistical Summary <code>python3 generate_summary.py logout.dat &gt; summary.txt</code>"},{"location":"#research-applications","title":"Research Applications","text":"<p>htsim has been extensively used in networking research and protocol development across academia and industry:</p>"},{"location":"#protocol-development","title":"Protocol Development","text":"<ul> <li>Multipath TCP: Original IETF standardization performance evaluation</li> <li>NDP: Complete protocol design and evaluation from conception to publication</li> <li>EQDS: Advanced datacenter congestion control development</li> <li>Swift: Delay-based congestion control algorithm validation</li> </ul>"},{"location":"#academic-research","title":"Academic Research","text":"<ul> <li>Datacenter Architecture Studies: FatTree, DragonFly, and BCube topology comparison</li> <li>Congestion Control Evaluation: Comprehensive protocol performance analysis</li> <li>Traffic Engineering: Load balancing and routing strategy optimization  </li> <li>Network Buffer Sizing: Switch buffer requirements and performance trade-offs</li> </ul>"},{"location":"#industry-applications","title":"Industry Applications","text":"<ul> <li>Product Development: Protocol implementation validation before hardware deployment</li> <li>Network Planning: Capacity planning and architecture design validation</li> <li>Performance Optimization: Parameter tuning and configuration optimization</li> <li>Failure Analysis: Network resilience and failure recovery mechanism testing</li> </ul>"},{"location":"#publications-and-impact","title":"Publications and Impact","text":"<p>Major networking conferences have featured research using htsim including SIGCOMM, NSDI, CoNEXT, and INFOCOM. The simulator has enabled reproducible research with publicly available configurations and datasets.</p> <p>Research Collaboration</p> <p>htsim's deterministic results and comprehensive logging make it ideal for reproducible research. Many published studies provide complete experimental configurations for replication.</p>"},{"location":"#getting-started-with-research","title":"Getting Started with Research","text":"<p>For researchers new to htsim, we recommend the following progression:</p> <ol> <li>Quick Start Guide - Basic simulation setup and execution</li> <li>Protocol Tutorial - Understanding transport protocol implementations  </li> <li>Traffic Modeling - Creating realistic workload patterns</li> <li>Performance Analysis - Extracting meaningful insights from results</li> <li>Advanced Experiments - Multi-factor studies and parameter sweeps</li> <li>Custom Development - Implementing new protocols and features</li> </ol>"},{"location":"assignments/assignment-1/","title":"Assignment 1: Dumbbell Network Topology Analysis with htsim","text":"Example of a Dumbbell Network Topology"},{"location":"assignments/assignment-1/#introduction","title":"Introduction","text":"<p>In this assignment, you will explore one of the most fundamental network topologies used in networking research: the dumbbell topology. This seemingly simple topology consists of two clusters of nodes connected by a single bottleneck link, making it an ideal testbed for understanding congestion control behavior, fairness, and network performance under resource constraints.</p> <p>The dumbbell topology is widely used in networking research because it creates a controlled bottleneck scenario that allows researchers to:</p> <ul> <li>Study how different protocols compete for limited bandwidth</li> <li>Analyze fairness between flows sharing the same bottleneck</li> <li>Understand queue dynamics and buffer management</li> <li>Evaluate the impact of round-trip time (RTT) differences</li> <li>Test protocol behavior under congestion</li> </ul> <p>You will use the htsim network simulator to implement dumbbell topologies through traffic matrices and conduct comprehensive performance analysis across multiple transport protocols.</p>"},{"location":"assignments/assignment-1/#learning-objectives","title":"Learning Objectives","text":"<p>By completing this assignment, you will:</p> <ol> <li>Understand network bottlenecks and their impact on transport protocol performance</li> <li>Implement dumbbell topologies using htsim traffic matrices</li> <li>Compare transport protocols (TCP, NDP, Swift) under identical network conditions</li> <li>Analyze congestion control behavior in bottleneck scenarios</li> <li>Evaluate protocol fairness when multiple flows compete for resources</li> <li>Interpret performance metrics including throughput, latency, and queue utilization</li> <li>Conduct systematic experiments with parameter variations</li> </ol>"},{"location":"assignments/assignment-1/#background-dumbbell-topology","title":"Background: Dumbbell Topology","text":""},{"location":"assignments/assignment-1/#what-is-a-dumbbell-topology","title":"What is a Dumbbell Topology?","text":"<p>A dumbbell topology consists of:</p> <ul> <li>Two clusters of nodes (left and right sides)</li> <li>A single bottleneck link connecting the clusters</li> <li>Multiple flows that traverse the bottleneck link</li> </ul> <pre><code>Cluster A          Bottleneck Link          Cluster B\n\nNode 0 \u2500\u2500\u2500\u2500\u2510                          \u250c\u2500\u2500\u2500\u2500 Node 8\nNode 1 \u2500\u2500\u2500\u2500\u2524                          \u251c\u2500\u2500\u2500\u2500 Node 9  \nNode 2 \u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500 Router A \u2550\u2550\u2550\u2550\u2550\u2550\u2550 Router B \u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500 Node 10\nNode 3 \u2500\u2500\u2500\u2500\u2524       \u2502                  \u2502       \u251c\u2500\u2500\u2500\u2500 Node 11\nNode 4 \u2500\u2500\u2500\u2500\u2518       \u2502    Bottleneck    \u2502       \u2514\u2500\u2500\u2500\u2500 Node 12\n                   \u2502      Link        \u2502\n              Queue/Buffer        Queue/Buffer\n</code></pre>"},{"location":"assignments/assignment-1/#why-dumbbell-topologies-matter","title":"Why Dumbbell Topologies Matter","text":"<ol> <li>Controlled Bottleneck: Creates a predictable congestion point for analysis</li> <li>Fairness Testing: Multiple flows compete for the same limited resource</li> <li>Protocol Comparison: Identical conditions allow fair protocol comparison</li> <li>Real-world Relevance: Models scenarios like internet backbone links, data center uplinks</li> <li>Educational Value: Simple enough to understand, complex enough to be interesting</li> </ol>"},{"location":"assignments/assignment-1/#key-research-questions","title":"Key Research Questions","text":"<ul> <li>How do different congestion control algorithms share bottleneck bandwidth?</li> <li>What happens when flows have different round-trip times?</li> <li>How do queue sizes affect protocol performance?</li> <li>Which protocols provide better fairness under congestion?</li> </ul>"},{"location":"assignments/assignment-1/#assignment-tasks","title":"Assignment Tasks","text":""},{"location":"assignments/assignment-1/#task-1-create-dumbbell-traffic-matrices-25-points","title":"Task 1: Create Dumbbell Traffic Matrices (25 points)","text":"<p>Create traffic matrices that implement dumbbell topologies with the following specifications:</p>"},{"location":"assignments/assignment-1/#subtask-11-basic-dumbbell-10-points","title":"Subtask 1.1: Basic Dumbbell (10 points)","text":"<p>Create a traffic matrix for a 16-node network implementing a symmetric dumbbell:</p> <ul> <li>Nodes 0-7: Left cluster</li> <li>Nodes 8-15: Right cluster  </li> <li>Traffic pattern: Each node in left cluster sends to corresponding node in right cluster</li> <li>Flow characteristics: Infinite flows (size = 0)</li> </ul> <p>Implementation hint: Use the existing permutation generator as a starting point, but modify the node assignments to create the dumbbell pattern.</p>"},{"location":"assignments/assignment-1/#subtask-12-asymmetric-dumbbell-10-points","title":"Subtask 1.2: Asymmetric Dumbbell (10 points)","text":"<p>Create a traffic matrix with uneven cluster sizes:</p> <ul> <li>Nodes 0-4: Left cluster (5 nodes)</li> <li>Nodes 5-15: Right cluster (11 nodes)</li> <li>Traffic pattern: All left nodes send to different right nodes</li> </ul>"},{"location":"assignments/assignment-1/#subtask-13-many-to-few-dumbbell-5-points","title":"Subtask 1.3: Many-to-Few Dumbbell (5 points)","text":"<p>Create a congestion-heavy scenario:</p> <ul> <li>Nodes 0-11: Senders (left cluster)</li> <li>Nodes 12-15: Receivers (right cluster)</li> <li>Traffic pattern: Multiple senders per receiver (3:1 ratio)</li> </ul> <p>Deliverable: Three .cm traffic matrix files with clear documentation of the topology structure.</p>"},{"location":"assignments/assignment-1/#task-2-protocol-performance-comparison-30-points","title":"Task 2: Protocol Performance Comparison (30 points)","text":"<p>Run experiments using your basic dumbbell topology (Task 1.1) with different transport protocols.</p>"},{"location":"assignments/assignment-1/#subtask-21-tcp-newreno-baseline-10-points","title":"Subtask 2.1: TCP NewReno Baseline (10 points)","text":"<pre><code>./htsim_tcp -nodes 16 -tm your_dumbbell.cm -q 50 -log sink -end 2000 -mtu 4000\n</code></pre>"},{"location":"assignments/assignment-1/#subtask-22-ndp-evaluation-10-points","title":"Subtask 2.2: NDP Evaluation (10 points)","text":"<pre><code>./htsim_ndp -nodes 16 -tm your_dumbbell.cm -cwnd 50 -strat ecmp_host -log sink -end 2000 -mtu 4000\n</code></pre>"},{"location":"assignments/assignment-1/#subtask-23-swift-analysis-10-points","title":"Subtask 2.3: Swift Analysis (10 points)","text":"<pre><code>./htsim_swift -nodes 16 -tm your_dumbbell.cm -cwnd 50 -log sink -end 2000 -mtu 4000\n</code></pre> <p>For each protocol, collect and analyze:</p> <ul> <li>Average throughput per flow</li> <li>Throughput fairness (coefficient of variation)</li> <li>Total network utilization</li> <li>Flow completion behavior (for finite flows)</li> </ul> <p>Deliverable: Performance comparison table and throughput plots for all three protocols.</p>"},{"location":"assignments/assignment-1/#task-3-bottleneck-analysis-20-points","title":"Task 3: Bottleneck Analysis (20 points)","text":"<p>Investigate how the bottleneck link affects network performance.</p>"},{"location":"assignments/assignment-1/#subtask-31-queue-size-impact-10-points","title":"Subtask 3.1: Queue Size Impact (10 points)","text":"<p>Using your best-performing protocol from Task 2, run experiments with different queue sizes:</p> <ul> <li>Small buffers: <code>-q 10</code></li> <li>Medium buffers: <code>-q 50</code></li> <li>Large buffers: <code>-q 200</code></li> </ul>"},{"location":"assignments/assignment-1/#subtask-32-congestion-behavior-10-points","title":"Subtask 3.2: Congestion Behavior (10 points)","text":"<p>Analyze queue utilization and packet drops:</p> <ul> <li>Enable queue logging: <code>-log sink,queue</code></li> <li>Create queue utilization plots over time</li> <li>Measure packet drop rates (if any)</li> </ul> <p>Deliverable: Analysis of how buffer sizes affect throughput, latency, and fairness.</p>"},{"location":"assignments/assignment-1/#task-4-fairness-analysis-15-points","title":"Task 4: Fairness Analysis (15 points)","text":"<p>Evaluate how fairly different protocols share the bottleneck bandwidth.</p>"},{"location":"assignments/assignment-1/#metrics-to-calculate","title":"Metrics to Calculate","text":"<ol> <li>Jain's Fairness Index: $F = \\frac{(\\sum_{i=1}^{n} x_i)^2}{n \\sum_{i=1}^{n} x_i^2}$ where $x_i$ is throughput of flow $i$</li> <li>Coefficient of Variation: $CV = \\frac{\\sigma}{\\mu}$ of throughput distribution</li> <li>Min-Max Ratio: $\\frac{\\text{min throughput}}{\\text{max throughput}}$</li> </ol>"},{"location":"assignments/assignment-1/#implementation","title":"Implementation","text":"<p>Create a Python script that:</p> <ul> <li>Parses htsim output for individual flow throughputs</li> <li>Calculates fairness metrics</li> <li>Generates fairness comparison plots</li> </ul> <p>Deliverable: Fairness analysis report comparing all three protocols with quantitative metrics.</p>"},{"location":"assignments/assignment-1/#task-5-parameter-sensitivity-study-10-points","title":"Task 5: Parameter Sensitivity Study (10 points)","text":"<p>Investigate how key parameters affect dumbbell topology performance.</p>"},{"location":"assignments/assignment-1/#parameters-to-study","title":"Parameters to Study","text":"<ul> <li>Number of flows: 4, 8, 16, 32 flows crossing the bottleneck</li> <li>Flow sizes: Infinite vs. finite flows (1MB, 10MB)</li> <li>Network delay: Different RTT settings using <code>-hop_latency</code></li> </ul> <p>Choose one protocol and one parameter to study in detail.</p> <p>Deliverable: Parameter sensitivity analysis with recommendations for optimal settings.</p>"},{"location":"assignments/assignment-1/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"assignments/assignment-1/#creating-dumbbell-traffic-matrices","title":"Creating Dumbbell Traffic Matrices","text":"<p>Since htsim uses traffic matrices rather than explicit topology specification, you'll create dumbbell topologies through careful traffic pattern design:</p> <pre><code># Example: Basic dumbbell traffic matrix generator\ndef generate_dumbbell_matrix(filename, total_nodes, left_size):\n    \"\"\"\n    Generate a dumbbell traffic matrix.\n\n    Args:\n        filename: Output .cm file\n        total_nodes: Total nodes in network\n        left_size: Number of nodes in left cluster\n    \"\"\"\n    right_size = total_nodes - left_size\n    connections = min(left_size, right_size)\n\n    with open(filename, 'w') as f:\n        f.write(f\"Nodes {total_nodes}\\n\")\n        f.write(f\"Connections {connections}\\n\")\n\n        # Create left-to-right traffic flows\n        for i in range(connections):\n            left_node = i\n            right_node = left_size + i\n            f.write(f\"{left_node}-&gt;{right_node} id {i+1} start 0 size 0\\n\")\n</code></pre>"},{"location":"assignments/assignment-1/#expected-network-behavior","title":"Expected Network Behavior","text":"<p>In a properly implemented dumbbell topology, you should observe:</p> <ol> <li>Bottleneck Formation: All cross-cluster traffic must traverse the same logical link</li> <li>Queue Buildup: Congestion will occur at the bottleneck routers</li> <li>Protocol Differences: Different congestion control algorithms will behave distinctly</li> <li>Fairness Variations: Some protocols will be more fair than others</li> </ol>"},{"location":"assignments/assignment-1/#analysis-tools","title":"Analysis Tools","text":"<p>Use the provided analysis scripts:</p> <pre><code># Generate throughput plots\npython3 create_throughput_plot.py logout.dat protocol experiment_name\n\n# Extract individual flow statistics  \n../parse_output logout.dat -protocol -show\n\n# Create custom analysis\npython3 analyze_fairness.py logout.dat &gt; fairness_report.txt\n</code></pre>"},{"location":"assignments/assignment-1/#expected-results","title":"Expected Results","text":""},{"location":"assignments/assignment-1/#protocol-performance-characteristics","title":"Protocol Performance Characteristics","text":"<p>TCP NewReno:</p> <ul> <li>Conservative congestion control</li> <li>Potential unfairness due to AIMD dynamics</li> <li>Moderate throughput utilization</li> </ul> <p>NDP:</p> <ul> <li>Pull-based flow control</li> <li>Generally good fairness</li> <li>High throughput utilization</li> </ul> <p>Swift:</p> <ul> <li>Delay-based congestion control</li> <li>Potentially better fairness than TCP</li> <li>Variable performance depending on configuration</li> </ul>"},{"location":"assignments/assignment-1/#performance-metrics-to-report","title":"Performance Metrics to Report","text":"Metric TCP NDP Swift Average Throughput (Gbps) X.XX X.XX X.XX Fairness Index 0.XX 0.XX 0.XX Network Utilization (%) XX% XX% XX% Buffer Utilization High/Med/Low High/Med/Low High/Med/Low"},{"location":"assignments/assignment-1/#deliverables","title":"Deliverables","text":"<p>Submit the following files and reports:</p>"},{"location":"assignments/assignment-1/#1-implementation-files-20","title":"1. Implementation Files (20%)","text":"<ul> <li>Traffic matrices: All .cm files created (Tasks 1.1-1.3)</li> <li>Analysis scripts: Any custom Python scripts for fairness calculation</li> <li>Experiment scripts: Bash scripts to reproduce your experiments</li> </ul>"},{"location":"assignments/assignment-1/#2-experimental-results-50","title":"2. Experimental Results (50%)","text":"<ul> <li>Raw data: logout.dat files for all major experiments</li> <li>Processed data: CSV files with throughput, latency, and fairness metrics</li> <li>Visualizations: Throughput plots, fairness comparisons, parameter sensitivity graphs</li> </ul>"},{"location":"assignments/assignment-1/#3-technical-report-30","title":"3. Technical Report (30%)","text":"<p>A 4-6 page report including:</p>"},{"location":"assignments/assignment-1/#introduction-10","title":"Introduction (10%)","text":"<ul> <li>Explanation of dumbbell topology importance</li> <li>Research questions you investigated</li> </ul>"},{"location":"assignments/assignment-1/#methodology-20","title":"Methodology (20%)","text":"<ul> <li>Description of traffic matrix implementation</li> <li>Experimental setup and parameters</li> <li>Analysis methods used</li> </ul>"},{"location":"assignments/assignment-1/#results-50","title":"Results (50%)","text":"<ul> <li>Protocol performance comparison</li> <li>Fairness analysis with quantitative metrics</li> <li>Parameter sensitivity findings</li> <li>Discussion of bottleneck behavior</li> </ul>"},{"location":"assignments/assignment-1/#conclusions-20","title":"Conclusions (20%)","text":"<ul> <li>Summary of key findings</li> <li>Protocol recommendations for different scenarios</li> <li>Lessons learned about congestion control</li> </ul>"},{"location":"assignments/assignment-1/#evaluation-criteria","title":"Evaluation Criteria","text":""},{"location":"assignments/assignment-1/#excellent-90-100","title":"Excellent (90-100%)","text":"<ul> <li>All tasks completed with thorough analysis</li> <li>Clear understanding of congestion control principles</li> <li>Insightful conclusions supported by data</li> <li>Well-documented and reproducible experiments</li> <li>Professional-quality report and visualizations</li> </ul>"},{"location":"assignments/assignment-1/#good-80-89","title":"Good (80-89%)","text":"<ul> <li>Most tasks completed correctly</li> <li>Good understanding of basic concepts</li> <li>Adequate analysis and conclusions</li> <li>Mostly reproducible experiments</li> <li>Clear report with minor issues</li> </ul>"},{"location":"assignments/assignment-1/#satisfactory-70-79","title":"Satisfactory (70-79%)","text":"<ul> <li>Basic requirements met</li> <li>Some understanding demonstrated</li> <li>Limited analysis depth</li> <li>Experiments work but may have issues</li> <li>Report meets minimum requirements</li> </ul>"},{"location":"assignments/assignment-1/#needs-improvement-70","title":"Needs Improvement (&lt;70%)","text":"<ul> <li>Incomplete or incorrect implementation</li> <li>Limited understanding of concepts</li> <li>Insufficient analysis</li> <li>Non-reproducible experiments</li> <li>Poor quality report</li> </ul>"},{"location":"assignments/assignment-1/#advanced-challenges-bonus","title":"Advanced Challenges (Bonus)","text":"<p>For students seeking additional challenge:</p>"},{"location":"assignments/assignment-1/#challenge-1-dynamic-bottleneck-5-bonus","title":"Challenge 1: Dynamic Bottleneck (5% bonus)","text":"<p>Implement a scenario where the bottleneck capacity changes during the simulation. Investigate how different protocols adapt to capacity variations.</p>"},{"location":"assignments/assignment-1/#challenge-2-multi-bottleneck-topology-10-bonus","title":"Challenge 2: Multi-Bottleneck Topology (10% bonus)","text":"<p>Create a more complex topology with multiple potential bottlenecks and analyze how traffic load balancing affects performance.</p>"},{"location":"assignments/assignment-1/#challenge-3-custom-protocol-modification-15-bonus","title":"Challenge 3: Custom Protocol Modification (15% bonus)","text":"<p>Modify one of the existing protocols to improve fairness in dumbbell scenarios. Document your changes and evaluate the improvement.</p>"},{"location":"assignments/assignment-1/#challenge-4-real-world-validation-10-bonus","title":"Challenge 4: Real-World Validation (10% bonus)","text":"<p>Compare your simulation results with published research on dumbbell topologies. Discuss similarities and differences in findings.</p>"},{"location":"assignments/assignment-1/#resources-and-references","title":"Resources and References","text":""},{"location":"assignments/assignment-1/#essential-reading","title":"Essential Reading","text":"<ul> <li>RFC 5681: TCP Congestion Control</li> <li>\"Re-architecting datacenter networks and stacks for low latency and high performance\" (SIGCOMM 2017)</li> <li>\"Improving datacenter performance and robustness with multipath TCP\" (SIGCOMM 2011)</li> </ul>"},{"location":"assignments/assignment-1/#helpful-tools","title":"Helpful Tools","text":"<ul> <li>gnuplot: For creating publication-quality plots</li> <li>Python pandas: For data analysis and statistics</li> <li>Wireshark: For understanding packet-level behavior (if needed)</li> </ul>"},{"location":"assignments/assignment-1/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ul> <li>Low throughput: Check queue sizes and simulation duration</li> <li>Unfair results: Verify traffic matrix implements true dumbbell pattern</li> <li>Missing data: Ensure logging is enabled with <code>-log sink</code></li> <li>Plot generation failures: Install gnuplot and verify file paths</li> </ul> <p>Getting Help</p> <ul> <li>Review the quickstart guide for basic htsim usage</li> <li>Check existing traffic matrix examples in <code>connection_matrices/</code></li> <li>Use the course discussion forum for technical questions</li> <li>Office hours: [Your specific times]</li> </ul> <p>Academic Integrity</p> <ul> <li>You may discuss concepts with classmates but submit your own work</li> <li>Clearly cite any external resources or code you use</li> <li>Do not share traffic matrix files or analysis scripts with other students</li> </ul> <p>Due Date: [Insert your due date] Submission: Upload all files to [your course management system] Late Policy: [Insert your late policy]</p> <p>Good luck with your exploration of dumbbell topologies and congestion control! \ud83d\ude80</p>"},{"location":"getting_started/quickstart/quickstart/","title":"Quick Start","text":""},{"location":"getting_started/quickstart/quickstart/#installation","title":"Installation","text":"<p>htsim is a high-performance discrete event network simulator written in C++ with zero external dependencies. Installation is straightforward and requires only a modern C++ compiler.</p>"},{"location":"getting_started/quickstart/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>C++ Compiler: g++ or clang with C++11 support</li> <li>Operating System: Linux or macOS</li> <li>Build Tools: make (typically pre-installed)</li> </ul>"},{"location":"getting_started/quickstart/quickstart/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/Broadcom/csg-htsim.git\ncd csg-htsim\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#build-the-simulator","title":"Build the Simulator","text":"<pre><code># Build the core simulation library\ncd sim\nmake\n\n# Build datacenter experiments\ncd datacenter\nmake\n</code></pre> <p>After successful compilation, you should see several executables:</p> <pre><code>ls -la htsim_*\n# Expected output:\n# htsim_tcp    - TCP NewReno simulator\n# htsim_ndp    - NDP (Near-optimal Datacenter Protocol) simulator  \n# htsim_swift  - Swift congestion control simulator\n# htsim_roce   - RoCE (RDMA over Converged Ethernet) simulator\n# htsim_hpcc   - HPCC (High Precision Congestion Control) simulator\n# htsim_eqds   - EQDS (Earliest Queue Discharge Service) simulator\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#quick-start","title":"Quick Start","text":"<p>We'll start with a simple experiment using NDP (Near-optimal Datacenter Protocol) on a 16-node network to demonstrate the basic workflow.</p>"},{"location":"getting_started/quickstart/quickstart/#step-1-generate-a-traffic-matrix","title":"Step 1: Generate a Traffic Matrix","text":"<p>Traffic matrices define the communication patterns between nodes. Let's create a permutation pattern where each node sends data to exactly one other node:</p> <pre><code>cd connection_matrices\npython3 gen_permutation.py perm_16n_16c_quickstart.cm 16 16 0 0 0\n</code></pre> <p>This creates a traffic matrix file with the following parameters:</p> <ul> <li>16 nodes in the network</li> <li>16 connections (one per node)  </li> <li>Size 0 means infinite/continuous flows</li> <li>Start time 0 means all flows begin immediately</li> </ul> You can open perm_16n_16c_quickstart to see what the generated matrix looks like"},{"location":"getting_started/quickstart/quickstart/#step-2-run-your-first-experiment","title":"Step 2: Run Your First Experiment","text":"<p>Now let's run an NDP experiment using this traffic matrix:</p> <pre><code>cd .. # back to datacenter directory\n./htsim_ndp -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -cwnd 50 -strat ecmp_host -paths 16 -log sink -q 50 -end 1000 -mtu 4000\n</code></pre> <p>Parameter explanation:</p> <ul> <li><code>-nodes 16</code>: Create a 16-node FatTree datacenter topology</li> <li><code>-tm [file]</code>: Use our generated traffic matrix</li> <li><code>-cwnd 50</code>: Initial congestion window of 50 packets</li> <li><code>-strat ecmp_host</code>: Use ECMP routing with host-based path selection</li> <li><code>-paths 16</code>: Allow up to 16 parallel paths per flow</li> <li><code>-log sink</code>: Enable throughput logging at receivers</li> <li><code>-q 50</code>: Set queue size to 50 packets</li> <li><code>-end 1000</code>: Run simulation for 1000 microseconds</li> <li><code>-mtu 4000</code>: Set MTU to 4000 bytes</li> </ul> <p>Expected output:</p> <pre><code>Starting simulation with 16 nodes...\n[PLACEHOLDER: Typical simulation progress output]\nSimulation completed in X.XX seconds\nResults written to logout.dat\n</code></pre> Make sure you are inside datacenter directory when running the command"},{"location":"getting_started/quickstart/quickstart/#step-3-analyze-the-results","title":"Step 3: Analyze the Results","text":""},{"location":"getting_started/quickstart/quickstart/#quick-summary","title":"Quick Summary","text":"<p>Get average throughput for all flows:</p> <pre><code>../parse_output logout.dat -ndp -show\n</code></pre> <p>Expected output:</p> <pre><code>[PLACEHOLDER: Average throughput results]\nFlow throughputs: X.XX Gbps average\nTotal network utilization: XX%\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#detailed-analysis-with-plots","title":"Detailed Analysis with Plots","text":"<p>Generate time-series throughput plots:</p> <pre><code>python3 create_throughput_plot.py logout.dat ndp quickstart_results\n</code></pre> <p>This creates several files:</p> <ul> <li><code>quickstart_results_timeseries.dat</code> - Raw throughput data over time</li> <li><code>quickstart_results_plot.gp</code> - Gnuplot script for visualization</li> <li><code>quickstart_results_throughput.pdf</code> - Generated plot (if gnuplot installed)</li> </ul> One example figure that could be generated from htsim simulation"},{"location":"getting_started/quickstart/quickstart/#understanding-your-results","title":"Understanding Your Results","text":""},{"location":"getting_started/quickstart/quickstart/#throughput-data","title":"Throughput Data","text":"<p>The timeseries data file contains four columns:</p> <pre><code># Time(ms) AvgThroughput(Gbps) TotalThroughput(Gbps) NumFlows\n0.250 [PLACEHOLDER] [PLACEHOLDER] 16\n0.500 [PLACEHOLDER] [PLACEHOLDER] 16\n0.750 [PLACEHOLDER] [PLACEHOLDER] 16\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#performance-metrics","title":"Performance Metrics","text":"<p>Key metrics to look for:</p> <ul> <li>Average Throughput: Per-flow performance</li> <li>Total Throughput: Network-wide data transfer rate  </li> <li>Flow Completion Time: How long each flow takes (for finite flows)</li> <li>Queue Utilization: Buffer usage at switches</li> </ul>"},{"location":"getting_started/quickstart/quickstart/#what-good-results-look-like","title":"What Good Results Look Like","text":"<ul> <li>High throughput: Close to link capacity</li> <li>Low latency: Fast flow completion</li> <li>Fairness: Similar performance across flows</li> <li>Stability: Consistent performance over time</li> </ul>"},{"location":"getting_started/quickstart/quickstart/#next-steps","title":"Next Steps","text":""},{"location":"getting_started/quickstart/quickstart/#compare-different-protocols","title":"Compare Different Protocols","text":"<p>Run the same experiment with different transport protocols:</p> <pre><code># TCP NewReno\n./htsim_tcp -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -q 100 -log sink -end 1000\n\n# Swift congestion control\n./htsim_swift -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -cwnd 50 -log sink -end 1000\n\n# RoCE\n./htsim_roce -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -q 200 -log sink -end 1000\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#try-different-traffic-patterns","title":"Try Different Traffic Patterns","text":""},{"location":"getting_started/quickstart/quickstart/#incast-many-to-one","title":"Incast (Many-to-One)","text":"<p>Simulates scenarios like distributed storage or web server responses:</p> <pre><code>cd connection_matrices\npython3 gen_incast.py incast_16n.cm 16 1 2000000  # 15 senders to 1 receiver, 2MB flows\ncd ..\n./htsim_ndp -nodes 16 -tm connection_matrices/incast_16n.cm -cwnd 50 -strat ecmp_host -log sink -end 2000\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#all-to-all","title":"All-to-All","text":"<p>High network utilization scenario:</p> <pre><code>cd connection_matrices  \npython3 gen_serial_alltoall.py alltoall_16n.cm 16 1000000  # 1MB flows between all pairs\ncd ..\n./htsim_ndp -nodes 16 -tm connection_matrices/alltoall_16n.cm -cwnd 30 -strat ecmp_host -log sink -end 5000\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#experiment-with-parameters","title":"Experiment with Parameters","text":"<p>Try different configurations to see their impact:</p> <pre><code># Larger network (if you have time)\npython3 connection_matrices/gen_permutation.py perm_64n.cm 64 64 0 0 0\n./htsim_ndp -nodes 64 -tm connection_matrices/perm_64n.cm -cwnd 50 -strat ecmp_host -log sink -end 1000\n\n# Different queue sizes\n./htsim_ndp -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -q 10 -log sink -end 1000   # Small buffers\n./htsim_ndp -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -q 200 -log sink -end 1000  # Large buffers\n\n# Different routing strategies\n./htsim_ndp -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -strat perm -log sink -end 1000      # Source routing\n./htsim_ndp -nodes 16 -tm connection_matrices/perm_16n_16c_quickstart.cm -strat ecmp_ar -log sink -end 1000   # Adaptive routing\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#visualization-with-gnuplot","title":"Visualization with gnuplot","text":"<p>If you have gnuplot installed, generate publication-quality plots:</p> <pre><code># Install gnuplot (if needed)\n# Ubuntu/Debian: sudo apt-get install gnuplot\n# macOS: brew install gnuplot\n\n# Generate plots\ngnuplot quickstart_results_plot.gp\nopen quickstart_results_throughput.pdf  # macOS\n# or use your preferred PDF viewer\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#common-issues-troubleshooting","title":"Common Issues &amp; Troubleshooting","text":""},{"location":"getting_started/quickstart/quickstart/#build-errors","title":"Build Errors","text":"<p>Problem: Compilation fails with C++11 errors</p> <pre><code># Solution: Ensure you have a modern compiler\ng++ --version  # Should be 4.8+ or equivalent clang\n</code></pre> <p>Problem: \"make: command not found\"</p> <pre><code># Solution: Install build tools\n# Ubuntu/Debian: sudo apt-get install build-essential\n# macOS: Install Xcode Command Line Tools\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#runtime-issues","title":"Runtime Issues","text":"<p>Problem: Simulation runs but no output generated</p> <pre><code># Check if you included logging flags\n./htsim_ndp -nodes 16 -tm your_matrix.cm -log sink -end 1000\n#                                        ^^^^^^^^^ Required for analysis\n</code></pre> <p>Problem: \"Traffic matrix file not found\"</p> <pre><code># Ensure file exists and path is correct\nls -la connection_matrices/your_file.cm\n# Use absolute path if needed\n./htsim_ndp -tm `pwd`/connection_matrices/your_file.cm [other options]\n</code></pre> <p>Problem: Very low throughput results</p> <pre><code># Check queue sizes - too small queues cause drops\n./htsim_ndp [options] -q 100  # Try larger queue sizes\n\n# Check simulation duration - might be too short\n./htsim_ndp [options] -end 5000  # Run longer simulation\n</code></pre>"},{"location":"getting_started/quickstart/quickstart/#analysis-issues","title":"Analysis Issues","text":"<p>Problem: parse_output not found</p> <pre><code># Build the parser\ncd sim\nmake parse_output\n\n# Or use relative path\n../parse_output logout.dat -ndp -show\n</code></pre> <p>Problem: Python plotting script fails</p> <pre><code># Check Python version\npython3 --version  # Should be 3.6+\n\n# Try with explicit path\npython3 /full/path/to/create_throughput_plot.py logout.dat ndp results\n</code></pre> <p>Getting Help</p> <ul> <li>Check the wiki for detailed documentation</li> <li>Look at example experiments in <code>sim/EXAMPLES/</code> directory</li> <li>Examine existing traffic matrices in <code>connection_matrices/</code> for patterns</li> <li>Use smaller networks (4-8 nodes) for faster debugging</li> </ul> <p>Performance Note</p> <p>Large simulations (1000+ nodes) can take significant time and memory. Start small and scale up gradually.</p>"},{"location":"getting_started/quickstart/quickstart/#whats-next","title":"What's Next?","text":"<p>Now that you've run your first htsim experiment, you can:</p> <ol> <li>Explore the research examples in <code>sim/EXAMPLES/</code> directory</li> <li>Read the detailed documentation to understand protocol internals</li> <li>Run the complete experiment suites in the <code>experiments/</code> directory</li> <li>Develop your own transport protocols using the existing implementations as templates</li> <li>Create custom traffic patterns for your specific research needs</li> </ol> <p>Happy simulating! \ud83d\ude80</p>"}]}